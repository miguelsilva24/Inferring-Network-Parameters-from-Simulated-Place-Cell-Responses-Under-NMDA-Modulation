import numpy as np
import matplotlib.pyplot as plt
import torch
from sbi.inference import NPE, simulate_for_sbi
from sbi import utils as utils
from sbi import analysis
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from scipy.io import loadmat
import pandas as pd
from tqdm import tqdm
import os
import pickle
import json

def Fgauss2D(x, y, center_x, center_y, amplitude, sigma_x, sigma_y, theta):
    x_shifted = x - center_x
    y_shifted = y - center_y

    a = (np.cos(theta)**2) / (2 * sigma_x**2) + (np.sin(theta)**2) / (2 * sigma_y**2)
    b = (-np.sin(2 * theta)) / (4 * sigma_x**2) + (np.sin(2 * theta)) / (4 * sigma_y**2)
    c = (np.sin(theta)**2) / (2 * sigma_x**2) + (np.cos(theta)**2) / (2 * sigma_y**2)

    return amplitude * np.exp(-(a * x_shifted**2 + 2 * b * x_shifted * y_shifted + c * y_shifted**2))


# Leaky Integrate-and-Fire (LIF) neuron model
def LIF_neuron(I, dt, V_rest=-65, V_th=-55, V_reset=-70, tau=10):
    V = V_rest
    spikes = np.zeros(len(I))
    V_trace = np.zeros(len(I))
    for t in range(len(I)):
        dV = (-(V - V_rest) + I[t]) / tau
        V += dV * dt
        V_trace[t] = V
        if V >= V_th:
            V = V_reset
            spikes[t] = 1
    return spikes, V_trace

def FiringRateModel_ShiftedOutputNeuron(N_x, N_y, M_x, M_y, NMDA_EXC,NMDA_INH, EIratio, noise, stim_center_x, stim_center_y, amplitude, sigma_x, sigma_y, theta):
    dt = 0.1
    Tmax = 200
    time = np.arange(0, Tmax, dt)
    T = len(time)
    E_rev=0


    kernel_size = 9
    sigma = 1.20
    r = kernel_size // 2
    k = np.linspace(-r, r, kernel_size)
    gx, gy = np.meshgrid(k, k)
    J_exc_kernel = np.exp(-(gx**2 + gy**2) / (2 * sigma**2))
    J_exc_kernel = J_exc_kernel / np.sum(J_exc_kernel) * EIratio

    J_inh_to_out = np.exp(-((np.arange(M_x)[:, None] - M_x // 2)**2 + (np.arange(M_y) - M_y // 2)**2) / ((2 * 2)**2)) * EIratio
    J_inh_to_out /= np.sum(J_inh_to_out)


    input_x, input_y = np.meshgrid(np.arange(N_x), np.arange(N_y))
    stimulus = Fgauss2D(input_x, input_y, stim_center_x, stim_center_y, amplitude, sigma_x, sigma_y, theta)


    excitatory_grid = np.zeros((N_x, N_y, T))
    voltage_exc = np.zeros((N_x, N_y, T))
    for i in range(N_x):
        for j in range(N_y):
            I_exc = stimulus[i, j] + noise * np.random.randn(T) * 0.5
            spikes, V_trace = LIF_neuron(I_exc, dt)
            excitatory_grid[i, j, :] = spikes
            voltage_exc[i, j, :] = V_trace

    inhibitory_grid = np.zeros((M_x, M_y, T))
    voltage_inh = np.zeros((M_x, M_y, T))
    for i in range(M_x):
        for j in range(M_y):
            I_inh = 0.2 * np.sum(stimulus) + noise * np.random.randn(T) * 0.5
            spikes, V_trace = LIF_neuron(I_inh, dt)
            inhibitory_grid[i, j, :] = spikes
            voltage_inh[i, j, :] = V_trace


    output_response_map = np.zeros((N_x, N_y))
    for i in range(N_x):
        for j in range(N_y):
            # Coordenadas v√°lidas dentro del grid
            x0, x1 = max(0, i - r), min(N_x, i + r + 1)
            y0, y1 = max(0, j - r), min(N_y, j + r + 1)
            kx0, kx1 = r - (i - x0), r + (x1 - i)
            ky0, ky1 = r - (j - y0), r + (y1 - j)

            exc_patch = excitatory_grid[x0:x1, y0:y1, :]
            V_patch_exc = voltage_exc[x0:x1, y0:y1, :]
            kernel_patch = J_exc_kernel[kx0:kx1, ky0:ky1]

            V_local_patch_exc = np.sum(V_patch_exc * kernel_patch[:, :, None], axis=(0, 1))
            NMDA_weight_exc = NMDA_EXC*(E_rev - V_local_patch_exc) / (1 + np.exp((-(V_local_patch_exc +40 )/ 10.0)))
            modulated_exc_spike = np.sum(exc_patch * kernel_patch[:, :, None], axis=(0, 1)) * NMDA_weight_exc

            V_local_inh = np.sum(voltage_inh * J_inh_to_out[:, :, None], axis=(0, 1))
            NMDA_weight_inh = NMDA_INH*(E_rev - V_local_inh) / (1 + np.exp(-(V_local_inh+40) / 10.0))
            modulated_inh_spike = np.sum(inhibitory_grid * J_inh_to_out[:, :, None], axis=(0, 1)) * NMDA_weight_inh

            output_trace = (modulated_exc_spike - modulated_inh_spike)
            output_response_map[i, j] = np.max(output_trace)

    return output_response_map
